version: "3.8"
services:
    train:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: train
        ports:
            - "8000:8000" # Prometheus metrics
        volumes:
            - ./script:/app/script
            - ./dataset:/app/dataset
            - ./model:/app/model
            - ./logs:/app/logs
        environment:
            - PYTHONUNBUFFERED=1
            - CUDA_VISIBLE_DEVICES=0 # Set to -1 for CPU only
            - DAGSHUB_USERNAME=${DAGSHUB_USERNAME}
            - DAGSHUB_TOKEN=${DAGSHUB_TOKEN}
            - PROMETHEUS_API_KEY=${PROMETHEUS_API_KEY}
            - LOKI_API_KEY=${LOKI_API_KEY}
            - PROMETHEUS_USERNAME=1902030
            - LOKI_USERNAME=1050298
            - PROMETHEUS_REMOTE_WRITE_URL=https://prometheus-prod-37-prod-ap-southeast-1.grafana.net/api/prom/push
            - LOKI_URL=https://logs-prod-020.grafana.net
            - MLFLOW_TRACKING_URI=https://dagshub.com/salsazufar/project-akhir-mlops.mlflow
        networks:
            - monitoring
        depends_on:
            mlflow:
                condition: service_healthy
            prometheus:
                condition: service_started
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/metrics"]
            interval: 30s
            timeout: 10s
            retries: 3
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    mlflow:
        build:
            context: .
            dockerfile: Dockerfile.mlflow
        container_name: mlflow
        ports:
            - "5000:5000"
        volumes:
            - ./mlflow:/mlflow
        networks:
            - monitoring
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
            interval: 10s
            timeout: 5s
            retries: 5
        environment:
            - MLFLOW_TRACKING_URI=http://localhost:5000
        deploy:
            resources:
                limits:
                    memory: 2G
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml # Correct mount for the configuration file
            - prometheus_data:/prometheus
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/usr/share/prometheus/console_libraries"
            - "--web.console.templates=/usr/share/prometheus/consoles"
        networks:
            - monitoring
        deploy:
            resources:
                limits:
                    memory: 2G
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
            - "3000:3000"
        volumes:
            - ./grafana/dashboards:/var/lib/grafana/dashboards
            - ./grafana/provisioning:/etc/grafana/provisioning
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=admin
            - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
            - GF_AUTH_ANONYMOUS_ENABLED=false
        networks:
            - monitoring
        depends_on:
            - prometheus
        deploy:
            resources:
                limits:
                    memory: 1G
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    loki:
        image: grafana/loki:2.9.0
        container_name: loki
        ports:
            - "3100:3100"
        volumes:
            - ./loki:/etc/loki
            - loki_data:/loki
        command: -config.file=/etc/loki/loki-config.yaml
        networks:
            - monitoring
        environment:
            - JAEGER_AGENT_HOST=tempo
            - JAEGER_SAMPLING_SERVER_URL=http://tempo:16686/sampling
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1",
                ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    promtail:
        image: grafana/promtail:2.9.0
        container_name: promtail
        volumes:
            - ./promtail:/etc/promtail
            - /var/log:/var/log:ro
            - /var/lib/docker/containers:/var/lib/docker/containers:ro
        command: -config.file=/etc/promtail/promtail-config.yaml
        networks:
            - monitoring
        depends_on:
            loki:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    memory: 512M
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

volumes:
    prometheus_data:
    loki_data:

networks:
    monitoring:
        driver: bridge
